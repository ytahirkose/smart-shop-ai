package com.smartshopai.user.unit.mapper;

import com.smartshopai.user.application.dto.request.CreateUserRequest;
import com.smartshopai.user.application.dto.response.UserResponse;
import com.smartshopai.user.application.mapper.UserMapper;
import com.smartshopai.user.domain.entity.User;
import com.smartshopai.user.domain.entity.UserBehaviorMetrics;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mapstruct.factory.Mappers;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Set;

import static org.junit.jupiter.api.Assertions.*;

/**
 * Unit tests for UserMapper
 */
class UserMapperTest {

    private UserMapper userMapper;
    private User testUser;
    private CreateUserRequest testRequest;

    @BeforeEach
    void setUp() {
        userMapper = Mappers.getMapper(UserMapper.class);
        
        testUser = User.builder()
                .id("test-user-id")
                .email("test@example.com")
                .username("testuser")
                .password("encodedPassword")
                .firstName("Test")
                .lastName("User")
                .phoneNumber("+1234567890")
                .roles(Set.of("USER"))
                .enabled(true)
                .accountNonExpired(true)
                .accountNonLocked(true)
                .credentialsNonExpired(true)
                .createdAt(LocalDateTime.now())
                .updatedAt(LocalDateTime.now())
                .preferredCategories(List.of("electronics", "books"))
                .maxBudget(1000.0)
                .preferredBrands("Apple,Samsung")
                .shoppingPreferences("quality,price")
                .behaviorMetrics(UserBehaviorMetrics.builder()
                        .userId("test-user-id")
                        .aiInsights("User prefers quality over price")
                        .shoppingPersonality("Quality-focused")
                        .totalSearches(50)
                        .totalProductViews(100)
                        .totalPurchases(10)
                        .totalSpent(2500.0)
                        .lastUpdated(LocalDateTime.now())
                        .build())
                .build();
        
        testRequest = CreateUserRequest.builder()
                .email("test@example.com")
                .username("testuser")
                .password("password123")
                .firstName("Test")
                .lastName("User")
                .phoneNumber("+1234567890")
                .preferredCategories(List.of("electronics", "books"))
                .maxBudget(1000.0)
                .preferredBrands("Apple,Samsung")
                .shoppingPreferences("quality,price")
                .build();
    }

    @Test
    void toEntity_Success() {
        // When
        User result = userMapper.toEntity(testRequest);

        // Then
        assertNotNull(result);
        assertEquals(testRequest.getEmail(), result.getEmail());
        assertEquals(testRequest.getUsername(), result.getUsername());
        assertEquals(testRequest.getFirstName(), result.getFirstName());
        assertEquals(testRequest.getLastName(), result.getLastName());
        assertEquals(testRequest.getPhoneNumber(), result.getPhoneNumber());
        assertEquals(testRequest.getPreferredCategories(), result.getPreferredCategories());
        assertEquals(testRequest.getMaxBudget(), result.getMaxBudget());
        assertEquals(testRequest.getPreferredBrands(), result.getPreferredBrands());
        assertEquals(testRequest.getShoppingPreferences(), result.getShoppingPreferences());
        
        // Password should be ignored (handled separately)
        assertNull(result.getPassword());
        
        // ID should be ignored (generated by database)
        assertNull(result.getId());
    }

    @Test
    void toResponse_Success() {
        // When
        UserResponse result = userMapper.toResponse(testUser);

        // Then
        assertNotNull(result);
        assertEquals(testUser.getId(), result.getId());
        assertEquals(testUser.getEmail(), result.getEmail());
        assertEquals(testUser.getUsername(), result.getUsername());
        assertEquals(testUser.getFirstName(), result.getFirstName());
        assertEquals(testUser.getLastName(), result.getLastName());
        assertEquals(testUser.getPhoneNumber(), result.getPhoneNumber());
        assertEquals(testUser.getRoles(), result.getRoles());
        assertEquals(testUser.isEnabled(), result.isEnabled());
        assertEquals(testUser.isEmailVerified(), result.isEmailVerified());
        assertEquals(testUser.isPhoneVerified(), result.isPhoneVerified());
        assertEquals(testUser.getCreatedAt(), result.getCreatedAt());
        assertEquals(testUser.getUpdatedAt(), result.getUpdatedAt());
        assertEquals(testUser.getLastLoginAt(), result.getLastLoginAt());
        assertEquals(testUser.getPreferredCategories(), result.getPreferredCategories());
        assertEquals(testUser.getMaxBudget(), result.getMaxBudget());
        assertEquals(testUser.getPreferredBrands(), result.getPreferredBrands());
        assertEquals(testUser.getShoppingPreferences(), result.getShoppingPreferences());
        
        // AI insights from behavior metrics
        assertEquals(testUser.getBehaviorMetrics().getAiInsights(), result.getAiInsights());
        assertEquals(testUser.getBehaviorMetrics().getShoppingPersonality(), result.getShoppingPersonality());
        assertEquals(testUser.getBehaviorMetrics().getTotalSearches(), result.getTotalSearches());
        assertEquals(testUser.getBehaviorMetrics().getTotalProductViews(), result.getTotalProductViews());
        assertEquals(testUser.getBehaviorMetrics().getTotalPurchases(), result.getTotalPurchases());
        assertEquals(testUser.getBehaviorMetrics().getTotalSpent(), result.getTotalSpent());
    }

    @Test
    void toResponse_WithNullBehaviorMetrics() {
        // Given
        testUser.setBehaviorMetrics(null);

        // When
        UserResponse result = userMapper.toResponse(testUser);

        // Then
        assertNotNull(result);
        assertEquals(testUser.getId(), result.getId());
        assertEquals(testUser.getEmail(), result.getEmail());
        
        // AI insights should be null when behavior metrics is null
        assertNull(result.getAiInsights());
        assertNull(result.getShoppingPersonality());
        assertEquals(0, result.getTotalSearches());
        assertEquals(0, result.getTotalProductViews());
        assertEquals(0, result.getTotalPurchases());
        assertEquals(0.0, result.getTotalSpent());
    }

    @Test
    void toResponseList_Success() {
        // Given
        List<User> users = List.of(testUser);

        // When
        List<UserResponse> results = userMapper.toResponseList(users);

        // Then
        assertNotNull(results);
        assertEquals(1, results.size());
        assertEquals(testUser.getId(), results.get(0).getId());
        assertEquals(testUser.getEmail(), results.get(0).getEmail());
    }

    @Test
    void toResponseList_EmptyList() {
        // Given
        List<User> users = List.of();

        // When
        List<UserResponse> results = userMapper.toResponseList(users);

        // Then
        assertNotNull(results);
        assertTrue(results.isEmpty());
    }

    @Test
    void toResponseList_NullList() {
        // When
        List<UserResponse> results = userMapper.toResponseList(null);

        // Then
        assertNull(results);
    }
}
